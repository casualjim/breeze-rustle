#!/usr/bin/env python3
"""
Extract block-level tree-sitter queries from nvim-treesitter repository.
Generates Rust code with embedded queries for code navigation.

Usage:
    python3 extract_queries.py

Outputs:
    - block_queries.rs (Rust code)
    - block_queries.json (JSON data)
"""

import re
import json
import tempfile
import zipfile
from pathlib import Path
from typing import Dict, List
import httpx

# Block-level constructs we want to extract
SEMANTIC_CAPTURES = {
    # Scope and definition captures (from locals.scm)
    "local.scope",
    "local.definition",
    "local.reference",
    "definition.function",
    "definition.method",
    "definition.class",
    "definition.type",
    "definition.enum",
    "definition.interface",
    "definition.module",
    "definition.namespace",
    "definition.macro",
    # Structural captures (from textobjects.scm and highlights.scm)
    "function.inner",
    "function.outer",
    "function.around",
    "class.inner",
    "class.outer",
    "class.around",
    "conditional.inner",
    "conditional.outer",
    "conditional.around",
    "loop.inner",
    "loop.outer",
    "loop.around",
    "block.inner",
    "block.outer",
    "block.around",
    # Control flow keywords
    "keyword.conditional",
    "keyword.repeat",
    "keyword.return",
    "keyword.function",
    "keyword.import",
}

# Query types to examine - now including textobjects for control flow
QUERY_FILES = ["locals.scm", "highlights.scm", "textobjects.scm"]


def download_nvim_treesitter() -> Path:
    """Download and extract nvim-treesitter repository."""
    print("Downloading nvim-treesitter...")

    with tempfile.TemporaryDirectory() as tmpdir:
        zip_path = Path(tmpdir) / "nvim-treesitter.zip"
        extract_path = Path(tmpdir) / "extracted"

        # Download the repository using httpx
        url = "https://github.com/nvim-treesitter/nvim-treesitter/archive/refs/heads/master.zip"
        with httpx.stream("GET", url) as response:
            response.raise_for_status()
            with open(zip_path, "wb") as f:
                for chunk in response.iter_bytes():
                    f.write(chunk)

        # Extract
        with zipfile.ZipFile(zip_path, "r") as zip_ref:
            zip_ref.extractall(extract_path)

        # Move to a permanent location
        extracted_repo = extract_path / "nvim-treesitter-master"

        # Copy to current directory
        import shutil

        dest = Path("nvim-treesitter-temp")
        if dest.exists():
            shutil.rmtree(dest)
        shutil.copytree(extracted_repo, dest)

        return dest


def parse_scm_queries(content: str) -> List[str]:
    """
    Parse S-expression queries from .scm files.
    Returns list of complete query expressions that contain block-level constructs.
    """
    queries = []
    lines = content.split("\n")

    current_query = []
    paren_depth = 0
    in_query = False

    for line in lines:
        stripped = line.strip()
        if not stripped or stripped.startswith(";"):  # Skip comments and empty lines
            continue

        # Count parentheses to track query boundaries
        open_parens = stripped.count("(")
        close_parens = stripped.count(")")

        if open_parens > 0 and paren_depth == 0:
            # Starting a new query
            current_query = [line]
            paren_depth = open_parens - close_parens
            in_query = True
        elif in_query:
            current_query.append(line)
            paren_depth += open_parens - close_parens

            if paren_depth <= 0:
                # Query complete
                query_text = "\n".join(current_query)
                if contains_block_construct(query_text):
                    queries.append(query_text.strip())

                current_query = []
                paren_depth = 0
                in_query = False

    return queries


def contains_block_construct(query_text: str) -> bool:
    """Check if query contains any semantic block constructs."""

    # Find all capture names (@something)
    capture_patterns = re.findall(r"@([a-zA-Z0-9_\.]+)", query_text)

    for capture in capture_patterns:
        # Check exact matches first
        if capture in SEMANTIC_CAPTURES:
            return True

        # Check partial matches for flexibility
        capture_lower = capture.lower()
        for semantic_capture in SEMANTIC_CAPTURES:
            if (
                semantic_capture.lower() in capture_lower
                or capture_lower in semantic_capture.lower()
            ):
                return True

    # Also check for node types that commonly define blocks
    # Look for common AST node patterns
    node_patterns = re.findall(r"\(([a-zA-Z_][a-zA-Z0-9_]*)", query_text)
    block_node_types = {
        "function_declaration",
        "function_definition",
        "method_declaration",
        "class_declaration",
        "class_definition",
        "struct_declaration",
        "interface_declaration",
        "enum_declaration",
        "module_declaration",
        "if_statement",
        "while_statement",
        "for_statement",
        "match_statement",
        "try_statement",
        "block_statement",
        "compound_statement",
        "lambda_expression",
        "closure_expression",
    }

    for node_type in node_patterns:
        node_lower = node_type.lower()
        for block_type in block_node_types:
            if block_type in node_lower or any(
                part in node_lower for part in block_type.split("_")
            ):
                return True

    return False


def extract_language_queries(queries_dir: Path) -> Dict[str, List[str]]:
    """Extract queries for all languages."""
    language_queries = {}

    if not queries_dir.exists():
        print(f"Queries directory not found: {queries_dir}")
        return {}

    for lang_dir in queries_dir.iterdir():
        if not lang_dir.is_dir():
            continue

        lang_name = lang_dir.name
        all_queries = []

        print(f"Processing {lang_name}...")

        for query_file in QUERY_FILES:
            query_path = lang_dir / query_file
            if query_path.exists():
                try:
                    content = query_path.read_text(encoding="utf-8")
                    queries = parse_scm_queries(content)
                    all_queries.extend(queries)
                    print(f"  Found {len(queries)} block queries in {query_file}")
                except Exception as e:
                    print(f"  Error reading {query_file}: {e}")

        if all_queries:
            language_queries[lang_name] = all_queries

    return language_queries


def generate_rust_code(language_queries: Dict[str, List[str]]) -> str:
    """Generate Rust code with embedded queries."""
    rust_code = """// Auto-generated from nvim-treesitter queries
// DO NOT EDIT - run extract_queries.py to regenerate

use std::collections::HashMap;

// Using a function instead of Lazy static to avoid extra dependencies
pub fn get_block_queries() -> HashMap<&'static str, &'static str> {
    let mut queries = HashMap::new();
    
"""

    for lang, queries in language_queries.items():
        # Combine all queries for this language
        combined_query = "\n\n".join(queries)

        # Use raw string literals to avoid most escaping issues
        rust_code += f'    queries.insert("{lang}", r#"{combined_query}"#);\n'

    rust_code += """    
    queries
}

pub fn get_structural_query(language: &str) -> Option<&'static str> {
    get_block_queries().get(language).copied()
}

pub fn supported_languages() -> Vec<&'static str> {
    get_block_queries().keys().collect()
}

/// Parse semantic blocks from source code using the appropriate query
/// This is useful for chunking code into semantic units for embeddings
pub fn parse_semantic_blocks(language: &str, source: &str) -> Result<Vec<SemanticBlock>, String> {
    // This would integrate with your tree-sitter parsing
    // Returns structured blocks with type, range, and content
    todo!("Implement with tree-sitter integration")
}

#[derive(Debug, Clone)]
pub struct SemanticBlock {
    pub block_type: String,  // "function", "class", "conditional", etc.
    pub name: Option<String>, // symbol name if available
    pub start_byte: usize,
    pub end_byte: usize,
    pub content: String,
}
"""

    return rust_code


def generate_json_output(language_queries: Dict[str, List[str]]) -> str:
    """Generate JSON output for non-Rust users."""
    # Convert to a more structured format
    structured = {}
    for lang, queries in language_queries.items():
        structured[lang] = {"count": len(queries), "queries": queries}

    return json.dumps(structured, indent=2)


def main():
    """Main extraction process."""
    print("Tree-sitter Block Query Extractor")
    print("=" * 40)

    # Download nvim-treesitter
    repo_path = download_nvim_treesitter()
    queries_dir = repo_path / "queries"

    try:
        # Extract queries
        language_queries = extract_language_queries(queries_dir)

        print(f"\nExtracted queries for {len(language_queries)} languages:")
        total_queries = sum(len(queries) for queries in language_queries.values())
        print(f"Total block queries found: {total_queries}")

        for lang, queries in sorted(language_queries.items()):
            print(f"  {lang}: {len(queries)} queries")

        # Generate outputs
        print("\nGenerating output files...")

        # Rust code
        rust_code = generate_rust_code(language_queries)
        with open("block_queries.rs", "w") as f:
            f.write(rust_code)
        print("  Written: block_queries.rs")

        # JSON output
        json_output = generate_json_output(language_queries)
        with open("block_queries.json", "w") as f:
            f.write(json_output)
        print("  Written: block_queries.json")

        print("\nDone! Include block_queries.rs in your Rust project.")
        print("No additional dependencies required.")

        # Show sample usage
        if language_queries:
            sample_lang = next(iter(language_queries.keys()))
            print("\nSample usage in Rust:")
            print("    let queries = get_block_queries();")
            print(f'    if let Some(query) = queries.get("{sample_lang}") {{')
            print("        // Use the query with tree-sitter")
            print("    }")

    finally:
        # Cleanup
        import shutil

        if repo_path.exists():
            shutil.rmtree(repo_path)


if __name__ == "__main__":
    main()
