name: 'Setup Build Environment'
description: 'Sets up the complete build environment for breeze-rustle'
inputs:
  python-version:
    description: 'Python version to use'
    required: false
    default: '3.12'
  rust-target:
    description: 'Rust target triple to install (optional)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Install mise
      uses: jdx/mise-action@v2
      with:
        experimental: true
        install: false

    - name: Install tools with mise
      run: mise install
      shell: bash
      env:
        MISE_PYTHON_UV_VENV_CREATE_ARGS: "--python python${{ inputs.python-version }}"
        GITHUB_TOKEN: ${{ github.token }}

    - name: Install mold linker and C++ libraries on Linux
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y mold libc++-dev libc++abi-dev libstdc++-11-dev g++-11 libssl-dev pkg-config clang
        ARCH=$(uname -m)
        echo "Architecture detected: $ARCH"
        if [ "$ARCH" = "aarch64" ]; then
          echo "Detected ARM64 architecture"
          ldconfig -p | grep -E "c\+\+|stdc\+\+" | head -20
          ls /usr/lib/aarch64-linux-gnu
          sudo ln -s /usr/lib/aarch64-linux-gnu/libc++.so.1 /usr/lib/aarch64-linux-gnu/libc++.so

          echo "Setting ARM64-specific environment variables"
          echo "CFLAGS=-I/usr/include -I/usr/include/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "RUSTFLAGS=-L/usr/lib/aarch64-linux-gnu" >> $GITHUB_ENV
          echo "::notice::Set CFLAGS and RUSTFLAGS for ARM64 build"
        fi
      shell: bash

    - name: Download and setup ONNX Runtime on Linux
      if: runner.os == 'Linux'
      run: |
        # Download ONNX Runtime
        ONNX_VERSION="1.22.0"
        ARCH=$(uname -m)
        if [ "$ARCH" = "x86_64" ]; then
          ONNX_ARCH="x64"
        elif [ "$ARCH" = "aarch64" ]; then
          ONNX_ARCH="aarch64"
        else
          echo "Unsupported architecture: $ARCH"
          exit 1
        fi

        wget -q https://github.com/microsoft/onnxruntime/releases/download/v${ONNX_VERSION}/onnxruntime-linux-${ONNX_ARCH}-${ONNX_VERSION}.tgz
        tar -xzf onnxruntime-linux-${ONNX_ARCH}-${ONNX_VERSION}.tgz

        # Set environment variables
        echo "ORT_LIBRARY_PATH=$PWD/onnxruntime-linux-${ONNX_ARCH}-${ONNX_VERSION}/lib" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$PWD/onnxruntime-linux-${ONNX_ARCH}-${ONNX_VERSION}/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
      shell: bash

    - name: Install npm dependencies
      run: npm install
      shell: bash

    - name: Install maturin
      run: |
        uv pip install --python .venv maturin[patchelf]
      shell: bash

    - name: Install Rust target
      if: inputs.rust-target != ''
      run: rustup target add ${{ inputs.rust-target }}
      shell: bash
