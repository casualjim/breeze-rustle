# This file is autogenerated by maturin v1.8.6
# To update, run
#
#    maturin generate-ci github --zig
#
name: CI

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest] # windows-latest
        # python-version: ["3.10", "3.11", "3.12"]
        python-version: ["3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: ./.github/actions/setup-env
        with:
          python-version: ${{ matrix.python-version }}

      - name: Run Rust tests
        run: |
          cargo zigbuild --tests --features local-embeddings
          cargo nextest run --features local-embeddings --no-fail-fast

      - name: Run Python tests
        run: |
          cd crates/breeze-py && uv run --active pytest -v
      - name: Install Node.js dependencies
        run: |
          cd crates/breeze-napi && npm install
      - name: Run Node.js tests
        run: |
          cd crates/breeze-napi && npm run test:all

  linux:
    runs-on: ${{ matrix.platform.runner }}
    needs: test
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04-arm
            target: aarch64
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: ./.github/actions/setup-env
        with:
          rust-target: ${{ matrix.platform.target }}-unknown-linux-gnu
      - name: Build breeze binary
        run: |
          if [ "${{ matrix.platform.target }}" = "x86_64" ]; then
            cargo zigbuild --workspace --exclude breeze-py --exclude breeze-napi --release --target x86_64-unknown-linux-gnu
            cd target/x86_64-unknown-linux-gnu/release
            tar cJf ../../../breeze-x86_64-unknown-linux-gnu.tar.xz breeze
          else
            cargo zigbuild --workspace --exclude breeze-py --exclude breeze-napi --release --target aarch64-unknown-linux-gnu
            cd target/aarch64-unknown-linux-gnu/release
            tar cJf ../../../breeze-aarch64-unknown-linux-gnu.tar.xz breeze
          fi
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --zig
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          working-directory: crates/breeze-py
          before-script-linux: |
            apk add --no-cache protobuf-dev

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: crates/breeze-py/dist
      - name: Upload breeze binary
        uses: actions/upload-artifact@v4
        with:
          name: breeze-binary-linux-${{ matrix.platform.target }}
          path: target/*.tar.xz

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    needs: test
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04-arm
            target: aarch64
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: ./.github/actions/setup-env
        with:
          rust-target: ${{ matrix.platform.target }}-unknown-linux-musl
      - name: Build breeze binary
        run: |
          if [ "${{ matrix.platform.target }}" = "x86_64" ]; then
            cargo zigbuild --workspace --exclude breeze-py --exclude breeze-napi --release --target x86_64-unknown-linux-musl
            cd target/x86_64-unknown-linux-musl/release
            tar cJf ../../../breeze-x86_64-unknown-linux-musl.tar.xz breeze
          else
            cargo zigbuild --workspace --exclude breeze-py --exclude breeze-napi --release --target aarch64-unknown-linux-musl
            cd target/aarch64-unknown-linux-musl/release
            tar cJf ../../../breeze-aarch64-unknown-linux-musl.tar.xz breeze
          fi
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --zig
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2
          working-directory: crates/breeze-py
          before-script-linux: |
            # Install protoc
            apk add --no-cache protobuf-dev
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: crates/breeze-py/dist
      - name: Upload breeze binary
        uses: actions/upload-artifact@v4
        with:
          name: breeze-binary-musllinux-${{ matrix.platform.target }}
          path: target/*.tar.xz

  # windows:
  #   runs-on: ${{ matrix.platform.runner }}
  #   needs: test
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: windows-latest
  #           target: x64
  #         - runner: windows-latest
  #           target: x86
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #         architecture: ${{ matrix.platform.target }}
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #     - name: Install npm dependencies
  #       run: npm install
  #     - name: Install all platform parsers for cross-compilation
  #       run: |
  #         npm install --no-save \
  #           @kumos/tree-sitter-parsers-darwin-arm64 \
  #           @kumos/tree-sitter-parsers-darwin-x64 \
  #           @kumos/tree-sitter-parsers-linux-arm64 \
  #           @kumos/tree-sitter-parsers-linux-arm64-musl \
  #           @kumos/tree-sitter-parsers-linux-x64 \
  #           @kumos/tree-sitter-parsers-linux-x64-musl \
  #           @kumos/tree-sitter-parsers-win32-arm64 \
  #           @kumos/tree-sitter-parsers-win32-x64
  #     - name: Install protoc
  #       uses: arduino/setup-protoc@v3
  #       with:
  #         version: "25.x"
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist
  #         sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
  #         working-directory: crates/breeze-py
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-windows-${{ matrix.platform.target }}
  #         path: crates/breeze-py/dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    needs: test
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: ./.github/actions/setup-env
      - name: Build breeze binary
        run: |
          cargo build --workspace --exclude breeze-py --exclude breeze-napi --release --target ${{ matrix.platform.target }}-apple-darwin
          cd target/${{ matrix.platform.target }}-apple-darwin/release
          tar cJf ../../../breeze-${{ matrix.platform.target }}-apple-darwin.tar.xz breeze

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          working-directory: crates/breeze-py
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: crates/breeze-py/dist
      - name: Upload breeze binary
        uses: actions/upload-artifact@v4
        with:
          name: breeze-binary-macos-${{ matrix.platform.target }}
          path: target/*.tar.xz

  sdist:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: ./.github/actions/setup-env
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          working-directory: crates/breeze-py
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: crates/breeze-py/dist

  build-node:
    runs-on: ${{ matrix.settings.host }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-14
            target: aarch64-apple-darwin
            build: |
              npm run build
              strip -x *.node
          - host: macos-13
            target: x86_64-apple-darwin
            build: |
              npm run build
              strip -x *.node
          # - host: windows-latest
          #   build: npm run build
          #   target: x86_64-pc-windows-msvc
          - host: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            build: |
              npm run build
              strip *.node
          - host: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            build: |
              npm run build
              strip *.node
    name: Build Node.js ${{ matrix.settings.target }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: ./.github/actions/setup-env

      - name: Install dependencies
        run: cd crates/breeze-napi && npm install

      - name: Build
        run: cd crates/breeze-napi && ${{ matrix.settings.build }}
        env:
          CARGO_BUILD_TARGET: ${{ matrix.settings.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: crates/breeze-napi/*.node
          if-no-files-found: error

  publish-npm:
    runs-on: ubuntu-latest
    needs: build-node
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: bindings-*
          path: crates/breeze-napi/
          merge-multiple: true
      - name: Install dependencies
        run: cd crates/breeze-napi && npm install
      - name: Publish to NPM
        run: cd crates/breeze-napi && npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, musllinux, macos, sdist] # windows
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
      - name: Create GitHub Release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            breeze-binary-*/*.tar.xz
          draft: false
          prerelease: false
          generate_release_notes: true
