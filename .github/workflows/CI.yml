name: CI

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read


jobs:
  test:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install npm dependencies
        run: npm install

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "25.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2
        with:
          tool: nextest

      - name: Install sccache
        uses: mozilla-actions/sccache-action@v0.0.3

      - name: Configure sccache
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Install Node.js dependencies in breeze-napi
        run: |
          cd crates/breeze-napi && npm install

      - name: Create Python virtual environment
        run: |
          cd crates/breeze-py && uv venv .venv --python python${{ matrix.python-version }}

      - name: Install Python development dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          cd crates/breeze-py && uv pip install --python .venv pytest pytest-asyncio maturin[patchelf]

      - name: Install Python development dependencies (non-Linux)
        if: runner.os != 'Linux'
        run: |
          cd crates/breeze-py && uv pip install --python .venv pytest pytest-asyncio maturin

      - name: Run Rust tests (breeze-grammars)
        run: |
          cargo nextest run -p breeze-grammars
      - name: Run Rust tests (breeze-chunkers)
        run: |
          cargo nextest run -p breeze-chunkers
      - name: Run Rust tests (breeze)
        run: |
          cargo nextest run -p breeze

      - name: Build Python package (Linux)
        if: runner.os == 'Linux'
        run: |
          cd crates/breeze-py && uv run --python .venv maturin develop --release



      - name: Run Python tests
        run: |
          cd crates/breeze-py && uv run --python .venv pytest -v

      - name: Run Node.js tests
        run: |
          cd crates/breeze-napi && npm run test:all

  linux:
    runs-on: ${{ matrix.platform.runner }}
    needs: test
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install npm dependencies
        run: npm install
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --zig
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          working-directory: crates/breeze-py
          before-script-linux: |
            # Install protoc
            curl -LO https://github.com/protocolbuffers/protobuf/releases/download/v25.1/protoc-25.1-linux-x86_64.zip
            unzip protoc-25.1-linux-x86_64.zip -d /usr/local
            rm protoc-25.1-linux-x86_64.zip
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: crates/breeze-py/dist

  musllinux:
    runs-on: ${{ matrix.platform.runner }}
    needs: test
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install npm dependencies
        run: npm install
      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "25.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --zig
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: musllinux_1_2
          working-directory: crates/breeze-py
          before-script-linux: |
            # Install protoc
            apk add --no-cache protobuf-dev
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.platform.target }}
          path: crates/breeze-py/dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    needs: test
    strategy:
      matrix:
        platform:
          - runner: windows-latest
            target: x64
          - runner: windows-latest
            target: x86
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
          architecture: ${{ matrix.platform.target }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install npm dependencies
        run: npm install
      - name: Install all platform parsers for cross-compilation
        run: |
          npm install --no-save \
            @kumos/tree-sitter-parsers-darwin-arm64 \
            @kumos/tree-sitter-parsers-darwin-x64 \
            @kumos/tree-sitter-parsers-linux-arm64 \
            @kumos/tree-sitter-parsers-linux-arm64-musl \
            @kumos/tree-sitter-parsers-linux-x64 \
            @kumos/tree-sitter-parsers-linux-x64-musl \
            @kumos/tree-sitter-parsers-win32-arm64 \
            @kumos/tree-sitter-parsers-win32-x64
      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "25.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          working-directory: crates/breeze-py
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: crates/breeze-py/dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    needs: test
    strategy:
      matrix:
        platform:
          - runner: macos-13
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install npm dependencies
        run: npm install
      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "25.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          working-directory: crates/breeze-py
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: crates/breeze-py/dist

  sdist:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install npm dependencies
        run: npm install
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          working-directory: crates/breeze-py
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: crates/breeze-py/dist

  build-node:
    runs-on: ${{ matrix.settings.host }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-14
            target: aarch64-apple-darwin
            build: |
              npm run build
              strip -x *.node
          - host: macos-13
            target: x86_64-apple-darwin
            build: |
              npm run build
              strip -x *.node
          - host: windows-latest
            build: npm run build
            target: x86_64-pc-windows-msvc
          - host: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            build: |
              npm run build
              strip *.node
          - host: ubuntu-22.04
            target: aarch64-unknown-linux-gnu
            build: |
              npm run build
              aarch64-linux-gnu-strip *.node
    name: Build Node.js ${{ matrix.settings.target }}
    steps:
      - uses: actions/checkout@v4


      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}

      - name: Setup cross compilation (Linux ARM64)
        if: matrix.settings.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install root npm dependencies
        run: npm install

      - name: Install protoc
        uses: arduino/setup-protoc@v3
        with:
          version: "25.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: cd crates/breeze-napi && npm install

      - name: Build
        run: cd crates/breeze-napi && ${{ matrix.settings.build }}
        env:
          CARGO_BUILD_TARGET: ${{ matrix.settings.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: crates/breeze-napi/*.node
          if-no-files-found: error

  publish-npm:
    runs-on: ubuntu-latest
    needs: build-node
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: bindings-*
          path: crates/breeze-napi/
          merge-multiple: true
      - name: Install dependencies
        run: cd crates/breeze-napi && npm install
      - name: Publish to NPM
        run: cd crates/breeze-napi && npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, musllinux, windows, macos, sdist]
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
