# This file is autogenerated by maturin v1.8.6
# To update, run
#
#    maturin generate-ci github --zig
#
name: CI

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test-rust:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup build environment
        uses: ./.github/actions/setup-env
        with:
          python-version: "3.12"

      - name: Run Rust tests
        env:
          RUSTFLAGS: -C debuginfo=0
        run: |
          cargo nextest run --features local-embeddings --no-fail-fast --build-jobs 3

  test-python:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup build environment
        uses: ./.github/actions/setup-env
        with:
          python-version: "3.12"

      - name: Run Python tests
        run: |
          set -euo pipefail
          uv sync -g dev
          uv run maturin develop --manifest-path crates/breeze-py/Cargo.toml
          uv run pytest -v

  test-node:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup build environment
        uses: ./.github/actions/setup-env
        with:
          python-version: "3.12"

      - name: Install Node.js dependencies
        run: |
          cd crates/breeze-napi && npm install

      - name: Run Node.js tests
        run: |
          cd crates/breeze-napi && npm run test:all


  linux:
    runs-on: ${{ matrix.platform.runner }}
    needs: [test-rust, test-python, test-node]
    strategy:
      matrix:
        platform:
          - runner: ubuntu-22.04
            target: x86_64
          - runner: ubuntu-22.04-arm
            target: aarch64
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: ./.github/actions/setup-env
        with:
          rust-target: ${{ matrix.platform.target }}-unknown-linux-gnu
      - name: Build breeze binary
        run: |
          echo RUSTFLAGS=$RUSTFLAGS
          echo CFLAGS=$CFLAGS
          cargo build --workspace --exclude breeze-py --exclude breeze-napi --release --target ${{ matrix.platform.target }}-unknown-linux-gnu
          cd target/${{ matrix.platform.target }}-unknown-linux-gnu/release
          tar cJf ../../../breeze-${{ matrix.platform.target }}-unknown-linux-gnu.tar.xz breeze

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --zig
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          manylinux: auto
          working-directory: crates/breeze-py

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: crates/breeze-py/dist
      - name: Upload breeze binary
        uses: actions/upload-artifact@v4
        with:
          name: breeze-binary-linux-${{ matrix.platform.target }}
          path: target/*.tar.xz

  # musllinux:
  #   runs-on: ${{ matrix.platform.runner }}
  #   needs: test
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: ubuntu-22.04
  #           target: x86_64
  #         - runner: ubuntu-22.04-arm
  #           target: aarch64
  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: Setup build environment
  #       uses: ./.github/actions/setup-env
  #       with:
  #         rust-target: ${{ matrix.platform.target }}-unknown-linux-musl
  #     - name: Build breeze binary
  #       run: |
  #         docker run \
  #           --rm \
  #           -e RUSTFLAGS="-C link-arg=-fuse-ld=mold" \
  #           -v $PWD:/app \
  #           -w /app ghcr.io/casualjim/breeze-alpine-builder \
  #           bash -c \
  #             'npm install && cargo zigbuild --no-default-features --workspace --exclude breeze-py --exclude breeze-napi --release --target ${{ matrix.platform.target }}-unknown-linux-musl'

  #         cd target/${{ matrix.platform.target }}-unknown-linux-musl/release
  #         tar cJf ../../../breeze-${{ matrix.platform.target }}-unknown-linux-musl.tar.xz breeze

  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist --zig
  #         sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
  #         manylinux: musllinux_1_2
  #         working-directory: crates/breeze-py
  #         before-script-linux: |
  #           # Install protoc
  #           apk add --no-cache protobuf-dev
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-musllinux-${{ matrix.platform.target }}
  #         path: crates/breeze-py/dist
  #     - name: Upload breeze binary
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: breeze-binary-musllinux-${{ matrix.platform.target }}
  #         path: target/*.tar.xz

  # windows:
  #   runs-on: ${{ matrix.platform.runner }}
  #   needs: test
  #   strategy:
  #     matrix:
  #       platform:
  #         - runner: windows-latest
  #           target: x64
  #         - runner: windows-latest
  #           target: x86
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.x
  #         architecture: ${{ matrix.platform.target }}
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #     - name: Install npm dependencies
  #       run: npm install
  #     - name: Install all platform parsers for cross-compilation
  #       run: |
  #         npm install --no-save \
  #           @kumos/tree-sitter-parsers-darwin-arm64 \
  #           @kumos/tree-sitter-parsers-darwin-x64 \
  #           @kumos/tree-sitter-parsers-linux-arm64 \
  #           @kumos/tree-sitter-parsers-linux-arm64-musl \
  #           @kumos/tree-sitter-parsers-linux-x64 \
  #           @kumos/tree-sitter-parsers-linux-x64-musl \
  #           @kumos/tree-sitter-parsers-win32-arm64 \
  #           @kumos/tree-sitter-parsers-win32-x64
  #     - name: Install protoc
  #       uses: arduino/setup-protoc@v3
  #       with:
  #         version: "25.x"
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         args: --release --out dist
  #         sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
  #         working-directory: crates/breeze-py
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: wheels-windows-${{ matrix.platform.target }}
  #         path: crates/breeze-py/dist

  macos:
    runs-on: ${{ matrix.platform.runner }}
    needs: [test-rust, test-python, test-node]
    strategy:
      matrix:
        platform:
          # - runner: macos-13
          #   target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: ./.github/actions/setup-env
      - name: Build breeze binary
        run: |
          cargo build --workspace --exclude breeze-py --exclude breeze-napi --release --target ${{ matrix.platform.target }}-apple-darwin
          cd target/${{ matrix.platform.target }}-apple-darwin/release
          tar cJf ../../../breeze-${{ matrix.platform.target }}-apple-darwin.tar.xz breeze

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist
          sccache: ${{ !startsWith(github.ref, 'refs/tags/') }}
          working-directory: crates/breeze-py
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: crates/breeze-py/dist
      - name: Upload breeze binary
        uses: actions/upload-artifact@v4
        with:
          name: breeze-binary-macos-${{ matrix.platform.target }}
          path: target/*.tar.xz

  sdist:
    runs-on: ubuntu-latest
    needs: [test-rust, test-python, test-node]
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: ./.github/actions/setup-env
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          working-directory: crates/breeze-py
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: crates/breeze-py/dist

  build-node:
    runs-on: ${{ matrix.settings.host }}
    needs: [test-rust, test-python, test-node]
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-14
            target: aarch64-apple-darwin
            build: |
              npm run build
              strip -x *.node
          # - host: macos-13
          #   target: x86_64-apple-darwin
          #   build: |
          #     npm run build
          #     strip -x *.node
          # - host: windows-latest
          #   build: npm run build
          #   target: x86_64-pc-windows-msvc
          - host: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            build: |
              npm run build
              strip *.node
          - host: ubuntu-22.04-arm
            target: aarch64-unknown-linux-gnu
            build: |
              npm run build
              strip *.node
    name: Build Node.js ${{ matrix.settings.target }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: ./.github/actions/setup-env

      - name: Install dependencies
        run: cd crates/breeze-napi && npm install

      - name: Build
        run: cd crates/breeze-napi && ${{ matrix.settings.build }}
        env:
          CARGO_BUILD_TARGET: ${{ matrix.settings.target }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: crates/breeze-napi/*.node
          if-no-files-found: error

  publish-npm:
    runs-on: ubuntu-latest
    needs: build-node
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: bindings-*
          path: crates/breeze-napi/
          merge-multiple: true
      - name: Install dependencies
        run: cd crates/breeze-napi && npm install
      - name: Publish to NPM
        run: cd crates/breeze-napi && npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch' }}
    needs: [linux, macos, sdist] # windows
    permissions:
      # Use to sign the release artifacts
      id-token: write
      # Used to upload release artifacts
      contents: write
      # Used to generate artifact attestation
      attestations: write
    steps:
      - uses: actions/download-artifact@v4
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: "wheels-*/*"
      - name: Publish to PyPI
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing wheels-*/*
      - name: Create GitHub Release
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        uses: softprops/action-gh-release@v2
        with:
          files: |
            breeze-binary-*/*.tar.xz
          draft: false
          prerelease: false
          generate_release_notes: true

  docker-publish:
    name: Publish Docker image to GHCR
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [linux]
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: ghcr.io/casualjim/breeze
      ORT_VERSION: "1.22.0" # default; override by editing here if bumping
      ORT_FLAVOR: "cpu"
    steps:
      - uses: actions/checkout@v4

      - name: Setup build environment
        uses: ./.github/actions/setup-env
        with:
          python-version: "3.12"

      - name: Download Linux breeze artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: breeze-binary-linux-*
          merge-multiple: true
          path: docker-input

      - name: Prepare dist/ layout from artifacts
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist/linux-amd64 dist/linux-arm64
          # Expand the uploaded tarballs: names like breeze-<target>-unknown-linux-gnu.tar.xz
          for f in docker-input/*.tar.xz; do
            echo "Extracting $f"
            # derive target 'x86_64' or 'aarch64' from filename
            base=$(basename "$f")
            if [[ "$base" == *x86_64-unknown-linux-gnu* ]]; then archdir="linux-amd64"; else archdir="linux-arm64"; fi
            tar -xJf "$f" -C "."
            # Expect a 'breeze' binary in the current directory after extraction
            test -f breeze
            mv breeze "dist/${archdir}/breeze"
            chmod +x "dist/${archdir}/breeze"
          done

      - name: Fetch ONNX Runtime libs (outside Docker)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist/linux-amd64/ort/lib dist/linux-arm64/ort/lib
          # Map docker arch to ORT archive arch names
          declare -A map
          map[linux-amd64]=x64
          map[linux-arm64]=aarch64
          for archdir in linux-amd64 linux-arm64; do
            ort_arch="${map[$archdir]}"
            url="https://github.com/microsoft/onnxruntime/releases/download/v${ORT_VERSION}/onnxruntime-linux-${ort_arch}-${ORT_VERSION}.tgz"
            echo "Downloading ORT ${ORT_VERSION} for ${archdir} from ${url}"
            curl -fsSL "$url" -o ort.tgz
            tar -xzf ort.tgz
            rm -f ort.tgz
            srcdir="onnxruntime-linux-${ort_arch}-${ORT_VERSION}/lib"
            test -d "$srcdir"
            cp -a "$srcdir/." "dist/${archdir}/ort/lib/"
            rm -rf "onnxruntime-linux-${ort_arch}-${ORT_VERSION}"
          done

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ github.ref_name }}
            type=semver,pattern={{major}}.{{minor}},value=${{ github.ref_name }}
            type=semver,pattern={{major}},value=${{ github.ref_name }}
            type=raw,value=latest
            type=raw,value=stable

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_name }}
            VCS_REF=${{ github.sha }}
            REPO_URL=https://github.com/${{ github.repository }}
            ORT_VERSION=${{ env.ORT_VERSION }}
            ORT_FLAVOR=${{ env.ORT_FLAVOR }}

      - name: Verify manifest
        run: |
          docker buildx imagetools inspect ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
